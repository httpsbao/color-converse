{"version":3,"sources":["component/Input.tsx","component/HEXInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","style","TextField","label","type","value","onChange","change","variant","width","HEXInput","RgbInput","randomColor","index","Math","floor","random","length","state","rgb","hsv","hex","rawHex","handleInputChange","bind","handleRgbConverse","handleHsvConverse","func","handleHexInputChange","this","parseInt","setState","parseFloat","num","dic","10","11","12","13","14","15","str","sh","flag","r","g","b","h","s","v","max_rgb","max","min_rgb","min","c","rawStr","toFixed","i","f","p","q","t","reg","toLowerCase","test","sixColor","j","slice","className","backgroundColor","display","flexDirection","e","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3850bd0c.chunk.js","sourcesContent":["import React, { CSSProperties } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\ninterface InputProps {\r\n    value: number;\r\n    change: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    style?: CSSProperties;\r\n    label:string\r\n}\r\n\r\nexport default function Input(props:InputProps){\r\n    return (\r\n        <div style={props.style}>\r\n        <TextField\r\n          label={props.label}\r\n          type=\"number\"\r\n          // placeholder=\"r:[0,255]\"\r\n          value={props.value}\r\n          onChange={props.change}\r\n        //   InputProps={{\r\n        //     startAdornment: <InputAdornment position=\"start\">Kg</InputAdornment>,\r\n        //   }}\r\n          variant=\"outlined\"\r\n          style={{width:\"110px\"}}\r\n        />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport { CSSProperties } from 'react';\r\n//import React, { CSSProperties } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\n\r\ninterface HEXInputProps{\r\n    value:string;\r\n    change: (event: React.ChangeEvent<HTMLInputElement>) => void;\r\n    style?: CSSProperties;\r\n}\r\nexport default function HEXInput(props:HEXInputProps){\r\n    return (\r\n        <div >\r\n        <TextField\r\n          label=\"hex\"\r\n          type=\"text\"\r\n          value={props.value}\r\n          onChange={props.change}\r\n          // InputProps={{\r\n          // startAdornment: <InputAdornment position=\"start\">#...</InputAdornment>,\r\n          // }}\r\n          variant=\"outlined\"\r\n          style={{width:\"150px\"}}\r\n        />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport './App.css';\r\nimport Input from './component/Input'\r\nimport HEXInput from './component/HEXInput'\r\n\r\ninterface RGBInputState {\r\n  rgb: number[],\r\n  hsv: number[],\r\n  hex: string,\r\n  rawHex:string,\r\n  \r\n}\r\n\r\nclass RgbInput extends React.Component<{}, RGBInputState>{\r\n  constructor(props: {}) {\r\n    super(props);\r\n\r\n    let randomColor=[\"#5674c9\",\"#25c9ab\",\"#9969c9\",\"#e6ee9c\"];\r\n    let randomRgb=[[153,105,201],[37,201,171],[153,105,201],[230,238,156]];\r\n    let randomHsv=[[270,0.4776,0.7882],[168.2209,0.815,0.7843],[270,0.4776,0.7882],[65.8537,0.3445,0.9333]];\r\n    let index = Math.floor((Math.random()*randomColor.length));\r\n\r\n    this.state = {\r\n      rgb: randomRgb[index],\r\n      hsv: randomHsv[index],\r\n      hex: randomColor[index], //绘图色\r\n      rawHex:randomColor[index]//原始值\r\n    };\r\n\r\n    this.handleInputChange = this.handleInputChange.bind(this);\r\n    this.handleRgbConverse = this.handleRgbConverse.bind(this);\r\n    this.handleHsvConverse = this.handleHsvConverse.bind(this);\r\n    this.func = this.func.bind(this);\r\n    this.handleHexInputChange = this.handleHexInputChange.bind(this);\r\n  }\r\n\r\n  handleInputChange(value: string, type: \"rgb\" | \"hsv\", index: number) {\r\n    if(type===\"rgb\"){\r\n      this.state[type][index] = parseInt(value);\r\n      this.setState(this.state);\r\n      this.handleRgbConverse();\r\n    }else{\r\n      //this.state[type][index] = parseInt(value);\r\n      this.state[type][index] = parseFloat(value);\r\n      this.setState(this.state);\r\n      this.handleHsvConverse();\r\n    }\r\n  }\r\n\r\n  func(num: number) {\r\n    if(!num){\r\n      return '00'\r\n    }\r\n    let dic: { [key: number]: string } = {\r\n      10: 'A',\r\n      11: 'B',\r\n      12: 'C',\r\n      13: 'D',\r\n      14: 'E',\r\n      15: 'F',\r\n    }\r\n    let str = \"\"\r\n    let sh = Math.floor(num / 16);\r\n    num = num - sh * 16;\r\n    let shTmp = \"\";\r\n    let numTmp = \"\"\r\n    if (sh > 9) {\r\n      shTmp = dic[sh];\r\n    } else {\r\n      shTmp = sh + \"\"\r\n    }\r\n    if (num > 9) {\r\n      numTmp = dic[num];\r\n    } else {\r\n      numTmp = num + \"\"\r\n    }\r\n    str += shTmp;\r\n    str += numTmp;\r\n    //console.log(str)\r\n    return str;\r\n  }\r\n\r\n  handleRgbConverse(flag=\"rgb\") {\r\n    let [r, g, b] = this.state.rgb;\r\n\r\n    if(r<0||!r) r=0;\r\n    else if(r>255) r=255;\r\n    if(g<0||!g) g=0;\r\n    else if(g>255) g=255;\r\n    if(b<0||!b) b=0;\r\n    else if(b>255) b=255;    \r\n\r\n    let str = \"#\"\r\n    str += this.func(r) + this.func(g) + this.func(b);\r\n\r\n    let h = 0; let s = 0; let v = 0;\r\n    r = r / 255;\r\n    g /= 255;\r\n    b /= 255;\r\n\r\n    let max_rgb = Math.max(r, g, b);\r\n    let min_rgb = Math.min(r, g, b);\r\n    let c = max_rgb - min_rgb;\r\n    v = max_rgb;\r\n    if (max_rgb === 0) {\r\n      s = 0;\r\n    } else {\r\n      s = c / max_rgb;\r\n    }\r\n    if (c === 0) {\r\n      h = 0;\r\n    } else {\r\n      if (r === max_rgb) {\r\n        h = (g - b) / c * 60;\r\n      }\r\n      if (g === max_rgb) {\r\n        h = ((b - r) / c + 2) * 60;\r\n      }\r\n      if (b === max_rgb) {\r\n        h = ((r - g) / c + 4) * 60;\r\n      }\r\n    }\r\n    if (h < 0) {\r\n      h += 360;\r\n    }\r\n    let rawStr=\"\";\r\n    if(flag===\"hex\"){\r\n      rawStr=this.state.rawHex;\r\n    }else{\r\n      rawStr=str;\r\n    }\r\n    this.setState({\r\n      hsv: [\r\n        parseFloat(h.toFixed(4)),\r\n        parseFloat(s.toFixed(4)),\r\n        parseFloat(v.toFixed(4))\r\n      ]\r\n      ,\r\n      hex: str,\r\n      rawHex:rawStr\r\n    })\r\n  }\r\n\r\n  handleHsvConverse() {\r\n    let [h, s, v] = this.state.hsv;\r\n\r\n    if(h<0||!h) h=0;\r\n    else if(h>360) h=360;\r\n    if(s<0||!s) s=0;\r\n    else if(s>1) s=1;\r\n    if(v<0||!v) v=0;\r\n    else if(v>1) v=1;\r\n\r\n    let r = 0, g = 0, b = 0;\r\n    let i = Math.floor((h / 60) % 6);\r\n    let f = h / 60 - i;\r\n    let p = v * (1 - s);\r\n    let q = v * (1 - f * s);\r\n    let t = v * (1 - (1 - f) * s);\r\n    switch (i) {\r\n      case 0:\r\n        r = v; g = t; b = p;\r\n        break;\r\n      case 1:\r\n        r = q; g = v; b = p;\r\n        break;\r\n      case 2:\r\n        r = p; g = v; b = t;\r\n        break;\r\n      case 3:\r\n        r = p; g = q; b = v;\r\n        break;\r\n      case 4:\r\n        r = t; g = p; b = v;\r\n        break;\r\n      case 5:\r\n        r = v; g = p; b = q;\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n    r = Math.floor(r * 255.0)\r\n    g = Math.floor(g * 255.0)\r\n    b = Math.floor(b * 255.0)\r\n    let str = \"#\"\r\n    str += this.func(r) + this.func(g) + this.func(b);\r\n    this.setState({\r\n      rgb: [\r\n        r,\r\n        g,\r\n        b\r\n      ],\r\n      hex: str,\r\n      rawHex:str\r\n    })\r\n  }\r\n\r\n  async handleHexInputChange(value:string){\r\n    let rawHex=value;\r\n    this.setState({rawHex});\r\n    let reg=/^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n    rawHex=rawHex.toLowerCase();\r\n    if(rawHex && reg.test(rawHex)){\r\n      await this.setState({hex:rawHex});\r\n      let sixColor=\"\";\r\n      if(rawHex.length===4){\r\n        sixColor+=\"#\";\r\n        for(let i=1;i<4;i++){\r\n          sixColor+=rawHex[i];\r\n          sixColor+=rawHex[i];\r\n        }\r\n      }else{\r\n        sixColor=rawHex;\r\n      }\r\n      //处理六位的颜色值\r\n      for(let i=1,j=0;i<7;i+=2,j++){\r\n        this.state['rgb'][j]=parseInt(\"0x\"+sixColor.slice(i,i+2));\r\n      }\r\n      await this.setState(this.state);\r\n      this.handleRgbConverse(\"hex\");\r\n    }\r\n  }\r\n  // handleHexInputChange(value:string){\r\n  //   let rawHex=value;\r\n  //   this.setState({rawHex})\r\n  //   console.log(rawHex)\r\n  //   let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\r\n  //   rawHex = rawHex.toLowerCase();\r\n  //   if (rawHex && reg.test(rawHex)) {\r\n  //     this.setState({hex:rawHex},()=>{\r\n  //       let sixColor = \"\";\r\n  //       if (rawHex.length === 4) {\r\n  //         sixColor+=\"#\"\r\n  //         for (let i=1; i<4; i++) {\r\n  //           sixColor+=rawHex[i];\r\n  //           sixColor+=rawHex[i];\r\n  //         }\r\n  //       }else{\r\n  //         sixColor=rawHex;\r\n  //       }\r\n\r\n  //       //处理六位的颜色值\r\n  //       for (let i=1,j=0; i<7; i+=2,j++) {\r\n  //         this.state['rgb'][j]=parseInt(\"0x\"+sixColor.slice(i,i+2));\r\n  //       }\r\n        \r\n  //       this.setState(this.state,()=>{\r\n  //         console.log(this.state.rgb)\r\n  //         this.handleRgbConverse();\r\n  //         console.log(this.state.hsv)\r\n  //       });\r\n  //     })\r\n  //   }\r\n  // }\r\n\r\n  render() {\r\n    let [r, g, b] = this.state.rgb;\r\n    let [h, s, v] = this.state.hsv;\r\n    let str = this.state.hex;\r\n    let rawHex=this.state.rawHex\r\n    return (\r\n      <div className=\"color\" style={{ backgroundColor: str }}>\r\n\r\n      <div className=\"bg\" style={{backgroundColor:\"white\"}}>\r\n        <h4>RGB</h4>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <Input value={r} label={'r:[0,255]'} change={(e) => { this.handleInputChange(e.target.value, \"rgb\", 0) }}></Input>\r\n          <Input value={g} label={'g:[0,255]'} change={(e) => { this.handleInputChange(e.target.value, \"rgb\", 1) }}></Input>\r\n          <Input value={b} label={'b:[0,255]'} change={(e) => { this.handleInputChange(e.target.value, \"rgb\", 2) }}></Input>\r\n        </div>\r\n\r\n        <h4>HSV</h4>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <Input value={h} label={'h:[0,360]'} change={(e) => { this.handleInputChange(e.target.value, \"hsv\", 0) }}></Input>\r\n          <Input value={s} label={'s:[0,1]'} change={(e) => { this.handleInputChange(e.target.value, \"hsv\", 1) }}></Input>\r\n          <Input value={v} label={'v:[0,1]'} change={(e) => { this.handleInputChange(e.target.value, \"hsv\", 2) }}></Input>\r\n        </div>\r\n\r\n        <h4>HEX</h4>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          <HEXInput value={rawHex} change={(e) => {this.handleHexInputChange(e.target.value)}} ></HEXInput>\r\n        </div>\r\n\r\n        </div>\r\n      </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nexport default RgbInput;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RgbInput from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RgbInput />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}