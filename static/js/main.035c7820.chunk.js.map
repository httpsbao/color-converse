{"version":3,"sources":["component/Input.tsx","component/HEXInput.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Input","props","style","TextField","label","type","value","onChange","change","variant","width","marginLeft","marginRight","HEXInput","RgbInput","randomColor","index","Math","floor","random","length","state","rgb","hsv","hex","rawHex","handleInputChange","bind","handleRgbConvert","handleHsvConvert","func","handleHexInputChange","this","parseInt","setState","parseFloat","num","dic","10","11","12","13","14","15","str","sh","flag","r","g","b","h","s","v","max_rgb","max","min_rgb","min","c","rawStr","toFixed","i","f","p","q","t","slice","reg","toLowerCase","test","sixColor","j","className","backgroundColor","display","flexDirection","e","target","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.035c7820.chunk.js","sourcesContent":["import React, { CSSProperties } from 'react';\nimport TextField from '@material-ui/core/TextField';\ninterface InputProps {\n    value: number;\n    change: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    style?: CSSProperties;\n    label:string\n}\n\nexport default function Input(props:InputProps){\n    return (\n        <div style={props.style}>\n        <TextField\n          label={props.label}\n          type=\"number\"\n          // placeholder=\"r:[0,255]\"\n          value={props.value}\n          onChange={props.change}\n        //   InputProps={{\n        //     startAdornment: <InputAdornment position=\"start\">Kg</InputAdornment>,\n        //   }}\n          variant=\"outlined\"\n          style={{width:\"110px\",marginLeft:\"5px\",marginRight:\"5px\"}}\n        />\n        </div>\n    )\n}","import React from 'react';\nimport { CSSProperties } from 'react';\n//import React, { CSSProperties } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\ninterface HEXInputProps{\n    value:string;\n    change: (event: React.ChangeEvent<HTMLInputElement>) => void;\n    style?: CSSProperties;\n}\nexport default function HEXInput(props:HEXInputProps){\n    return (\n        <div >\n        <TextField\n          label=\"hex\"\n          type=\"text\"\n          value={props.value}\n          onChange={props.change}\n          // InputProps={{\n          // startAdornment: <InputAdornment position=\"start\">#...</InputAdornment>,\n          // }}\n          variant=\"outlined\"\n          style={{width:\"150px\"}}\n        />\n        </div>\n    )\n}","import React from \"react\";\nimport \"./App.css\";\nimport Input from \"./component/Input\";\nimport HEXInput from \"./component/HEXInput\";\n\ninterface RGBInputState {\n  rgb: number[];\n  hsv: number[];\n  hex: string;\n  rawHex: string;\n}\n\nclass RgbInput extends React.Component<{}, RGBInputState> {\n  constructor(props: {}) {\n    super(props);\n\n    let randomColor = [\"#5674c9\", \"#25c9ab\", \"#9969c9\", \"#e6ee9c\"];\n    let randomRgb = [\n      [153, 105, 201],\n      [37, 201, 171],\n      [153, 105, 201],\n      [230, 238, 156],\n    ];\n    let randomHsv = [\n      [270, 0.4776, 0.7882],\n      [169.0244, 0.8159, 0.7882],\n      [270, 0.4776, 0.7882],\n      [65.8537, 0.3445, 0.9333],\n    ];\n    let index = Math.floor(Math.random() * randomColor.length);\n\n    this.state = {\n      rgb: randomRgb[index],\n      hsv: randomHsv[index],\n      hex: randomColor[index], //绘图色\n      rawHex: randomColor[index], //原始值\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.handleRgbConvert = this.handleRgbConvert.bind(this);\n    this.handleHsvConvert = this.handleHsvConvert.bind(this);\n    this.func = this.func.bind(this);\n    this.handleHexInputChange = this.handleHexInputChange.bind(this);\n  }\n\n  handleInputChange(value: string, type: \"rgb\" | \"hsv\", index: number) {\n    if (type === \"rgb\") {\n      this.state[type][index] = parseInt(value);\n      this.setState(this.state);\n      this.handleRgbConvert();\n    } else {\n      //this.state[type][index] = parseInt(value);\n      this.state[type][index] = parseFloat(value);\n      this.setState(this.state);\n      this.handleHsvConvert();\n    }\n  }\n\n  func(num: number) {\n    if (!num) {\n      return \"00\";\n    }\n    let dic: { [key: number]: string } = {\n      10: \"A\",\n      11: \"B\",\n      12: \"C\",\n      13: \"D\",\n      14: \"E\",\n      15: \"F\",\n    };\n    let str = \"\";\n    let sh = Math.floor(num / 16);\n    num = num - sh * 16;\n    let shTmp = \"\";\n    let numTmp = \"\";\n    if (sh > 9) {\n      shTmp = dic[sh];\n    } else {\n      shTmp = sh + \"\";\n    }\n    if (num > 9) {\n      numTmp = dic[num];\n    } else {\n      numTmp = num + \"\";\n    }\n    str += shTmp;\n    str += numTmp;\n    return str;\n  }\n\n  handleRgbConvert(flag = \"rgb\") {\n    let [r, g, b] = this.state.rgb;\n\n    if (!r) r = 0;\n    else {\n      if (r > 255) {\n        r = 255;\n      } else if (r < 0) {\n        r = 0;\n      }\n      this.setState({ rgb: [r, g, b] });\n    }\n\n    if (!g) g = 0;\n    else {\n      if (g > 255) {\n        g = 255;\n      } else if (g < 0) {\n        g = 0;\n      }\n      this.setState({ rgb: [r, g, b] });\n    }\n\n    if (!b) b = 0;\n    else {\n      if (b > 255) {\n        b = 255;\n      } else if (b < 0) {\n        b = 0;\n      }\n      this.setState({ rgb: [r, g, b] });\n    }\n\n    let str = \"#\";\n    str += this.func(r) + this.func(g) + this.func(b);\n\n    let h = 0;\n    let s = 0;\n    let v = 0;\n    r = r / 255;\n    g /= 255;\n    b /= 255;\n\n    let max_rgb = Math.max(r, g, b);\n    let min_rgb = Math.min(r, g, b);\n    let c = max_rgb - min_rgb;\n    v = max_rgb;\n    if (max_rgb === 0) {\n      s = 0;\n    } else {\n      s = c / max_rgb;\n    }\n    if (c === 0) {\n      h = 0;\n    } else {\n      if (r === max_rgb) {\n        h = ((g - b) / c) * 60;\n      }\n      if (g === max_rgb) {\n        h = ((b - r) / c + 2) * 60;\n      }\n      if (b === max_rgb) {\n        h = ((r - g) / c + 4) * 60;\n      }\n    }\n    if (h < 0) {\n      h += 360;\n    }\n    let rawStr = \"\";\n    if (flag === \"hex\") {\n      rawStr = this.state.rawHex;\n    } else {\n      rawStr = str;\n    }\n    this.setState({\n      hsv: [\n        parseFloat(h.toFixed(4)),\n        parseFloat(s.toFixed(4)),\n        parseFloat(v.toFixed(4)),\n      ],\n      hex: str,\n      rawHex: rawStr,\n    });\n  }\n\n  handleHsvConvert() {\n    let [h, s, v] = this.state.hsv;\n\n    if (!h) h = 0;\n    else {\n      if (h > 360) {\n        h = 360;\n      } else if (h < 0) {\n        h = 0;\n      }\n      this.setState({ hsv: [h, s, v] });\n    }\n\n    if (!s) s = 0;\n    else {\n      if (s > 1) {\n        s = 1;\n      } else if (s < 0) {\n        s = 0;\n      }\n      this.setState({ hsv: [h, s, v] });\n    }\n\n    if (!v) v = 0;\n    else {\n      if (v > 1) {\n        v = 1;\n      } else if (v < 0) {\n        v = 0;\n      }\n      this.setState({ hsv: [h, s, v] });\n    }\n\n    let r = 0,\n      g = 0,\n      b = 0;\n    let i = Math.floor((h / 60) % 6);\n    let f = h / 60 - i;\n    let p = v * (1 - s);\n    let q = v * (1 - f * s);\n    let t = v * (1 - (1 - f) * s);\n    switch (i) {\n      case 0:\n        r = v;\n        g = t;\n        b = p;\n        break;\n      case 1:\n        r = q;\n        g = v;\n        b = p;\n        break;\n      case 2:\n        r = p;\n        g = v;\n        b = t;\n        break;\n      case 3:\n        r = p;\n        g = q;\n        b = v;\n        break;\n      case 4:\n        r = t;\n        g = p;\n        b = v;\n        break;\n      case 5:\n        r = v;\n        g = p;\n        b = q;\n        break;\n      default:\n        break;\n    }\n    r = Math.floor(r * 255.0);\n    g = Math.floor(g * 255.0);\n    b = Math.floor(b * 255.0);\n    let str = \"#\";\n    str += this.func(r) + this.func(g) + this.func(b);\n    this.setState({\n      rgb: [r, g, b],\n      hex: str,\n      rawHex: str,\n    });\n  }\n\n  async handleHexInputChange(value: string) {\n    let rawHex = value;\n    if (rawHex[0] !== \"#\") {\n      rawHex = \"#\";\n    }\n    if (rawHex.length > 7) {\n      rawHex = rawHex.slice(0, 7);\n    }\n    this.setState({ rawHex });\n    let reg = /^#([0-9a-fA-f]{3}|[0-9a-fA-f]{6})$/;\n    rawHex = rawHex.toLowerCase();\n    if (rawHex && reg.test(rawHex)) {\n      await this.setState({ hex: rawHex });\n      let sixColor = \"\";\n      if (rawHex.length === 4) {\n        sixColor += \"#\";\n        for (let i = 1; i < 4; i++) {\n          sixColor += rawHex[i];\n          sixColor += rawHex[i];\n        }\n      } else {\n        sixColor = rawHex;\n      }\n      //处理六位的颜色值\n      for (let i = 1, j = 0; i < 7; i += 2, j++) {\n        this.state[\"rgb\"][j] = parseInt(\"0x\" + sixColor.slice(i, i + 2));\n      }\n      await this.setState(this.state);\n      this.handleRgbConvert(\"hex\");\n    }\n  }\n\n  render() {\n    let [r, g, b] = this.state.rgb;\n    let [h, s, v] = this.state.hsv;\n    let str = this.state.hex;\n    let rawHex = this.state.rawHex;\n    return (\n      <div className=\"color\" style={{ backgroundColor: str }}>\n        <div className=\"bg\" style={{ backgroundColor: \"white\" }}>\n          <h4>RGB</h4>\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <Input\n              value={r}\n              label={\"r:[0,255]\"}\n              change={(e) => {\n                this.handleInputChange(e.target.value, \"rgb\", 0);\n              }}\n            ></Input>\n            <Input\n              value={g}\n              label={\"g:[0,255]\"}\n              change={(e) => {\n                this.handleInputChange(e.target.value, \"rgb\", 1);\n              }}\n            ></Input>\n            <Input\n              value={b}\n              label={\"b:[0,255]\"}\n              change={(e) => {\n                this.handleInputChange(e.target.value, \"rgb\", 2);\n              }}\n            ></Input>\n          </div>\n\n          <h4>HSV</h4>\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <Input\n              value={h}\n              label={\"h:[0,360]\"}\n              change={(e) => {\n                this.handleInputChange(e.target.value, \"hsv\", 0);\n              }}\n            ></Input>\n            <Input\n              value={s}\n              label={\"s:[0,1]\"}\n              change={(e) => {\n                this.handleInputChange(e.target.value, \"hsv\", 1);\n              }}\n            ></Input>\n            <Input\n              value={v}\n              label={\"v:[0,1]\"}\n              change={(e) => {\n                this.handleInputChange(e.target.value, \"hsv\", 2);\n              }}\n            ></Input>\n          </div>\n\n          <h4>HEX</h4>\n          <div style={{ display: \"flex\", flexDirection: \"row\" }}>\n            <HEXInput\n              value={rawHex}\n              change={(e) => {\n                this.handleHexInputChange(e.target.value);\n              }}\n            ></HEXInput>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default RgbInput;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport RgbInput from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <RgbInput />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}